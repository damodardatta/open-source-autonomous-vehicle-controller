import { _ as _export_sfc, o as openBlock, c as createElementBlock, V as createStaticVNode } from "./chunks/framework.ce59e187.js";
const __pageData = JSON.parse('{"title":"Routing","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"contribute/website/Routing.md"}');
const _sfc_main = { name: "contribute/website/Routing.md" };
const _hoisted_1 = /* @__PURE__ */ createStaticVNode('<h1 id="routing" tabindex="-1">Routing <a class="header-anchor" href="#routing" aria-label="Permalink to &quot;Routing&quot;">​</a></h1><h2 id="file-based-routing" tabindex="-1">File-Based Routing <a class="header-anchor" href="#file-based-routing" aria-label="Permalink to &quot;File-Based Routing&quot;">​</a></h2><p>VitePress uses file-based routing, which means the generated HTML pages are mapped from the directory structure of the source Markdown files. For example, given the following directory structure:</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">.</span></span>\n<span class="line"><span style="color:#A6ACCD;">├─ guide</span></span>\n<span class="line"><span style="color:#A6ACCD;">│  ├─ introduction.md</span></span>\n<span class="line"><span style="color:#A6ACCD;">│  └─ index.md</span></span>\n<span class="line"><span style="color:#A6ACCD;">├─ index.md</span></span>\n<span class="line"><span style="color:#A6ACCD;">└─ about</span></span></code></pre></div><p>The generated HTML pages will be:</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">index.md                  --&gt;  /index.html (accessible as /)</span></span>\n<span class="line"><span style="color:#A6ACCD;">about                     --&gt;  /about</span></span>\n<span class="line"><span style="color:#A6ACCD;">guide/index.md            --&gt;  /guide/index.html (accessible as /guide/)</span></span>\n<span class="line"><span style="color:#A6ACCD;">guide/getting-started.md  --&gt;  /guide/getting-started.html</span></span></code></pre></div><p>The resulting HTML can be hosted on any web server that can serve static files.</p><h2 id="root-and-source-directory" tabindex="-1">Root and Source Directory <a class="header-anchor" href="#root-and-source-directory" aria-label="Permalink to &quot;Root and Source Directory&quot;">​</a></h2><p>There are two important concepts in the file structure of the project: the <strong>project root</strong> and the <strong>source directory</strong>.</p><h3 id="project-root" tabindex="-1">Project Root <a class="header-anchor" href="#project-root" aria-label="Permalink to &quot;Project Root&quot;">​</a></h3><p>Project root is where VitePress will try to look for the <code>.vitepress</code> special directory. The <code>.vitepress</code> directory is a reserved location for VitePress&#39; config file, dev server cache, build output, and optional theme customization code.</p><p>When you run <code>vitepress dev</code> or <code>vitepress build</code> from the command line, VitePress will use the current working directory as project root. To specify a sub-directory as root, you will need to pass the relative path to the command. For example, our VitePress project is located in <code>./docs</code>, you should run <code>vitepress dev docs</code>:</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">.</span></span>\n<span class="line"><span style="color:#A6ACCD;">├─ docs                    # project root</span></span>\n<span class="line"><span style="color:#A6ACCD;">│  ├─ .vitepress           # config dir</span></span>\n<span class="line"><span style="color:#A6ACCD;">│  ├─ getting-started.md</span></span>\n<span class="line"><span style="color:#A6ACCD;">│  └─ index.md</span></span>\n<span class="line"><span style="color:#A6ACCD;">└─ ...</span></span></code></pre></div><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">vitepress</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">dev</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">docs</span></span></code></pre></div><p>This is going to result in the following source-to-HTML mapping:</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">docs/index.md            --&gt;  /index.html (accessible as /)</span></span>\n<span class="line"><span style="color:#A6ACCD;">docs/getting-started.md  --&gt;  /getting-started.html</span></span></code></pre></div><h3 id="source-directory" tabindex="-1">Source Directory <a class="header-anchor" href="#source-directory" aria-label="Permalink to &quot;Source Directory&quot;">​</a></h3><p>Source directory is where your Markdown source files live. By default, it is the same as the project root. However, you can configure it via the <code>srcDir</code> config option.</p><p>The <code>srcDir</code> option is resolved relative to project root. For example, with <code>srcDir: &#39;src&#39;</code>, your file structure will look like this:</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">.                          # project root</span></span>\n<span class="line"><span style="color:#A6ACCD;">├─ .vitepress              # config dir</span></span>\n<span class="line"><span style="color:#A6ACCD;">└─ src                     # source dir</span></span>\n<span class="line"><span style="color:#A6ACCD;">   ├─ getting-started.md</span></span>\n<span class="line"><span style="color:#A6ACCD;">   └─ index.md</span></span></code></pre></div><p>The resulting source-to-HTML mapping:</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">src/index.md            --&gt;  /index.html (accessible as /)</span></span>\n<span class="line"><span style="color:#A6ACCD;">src/getting-started.md  --&gt;  /getting-started.html</span></span></code></pre></div><h2 id="linking-between-pages" tabindex="-1">Linking Between Pages <a class="header-anchor" href="#linking-between-pages" aria-label="Permalink to &quot;Linking Between Pages&quot;">​</a></h2><p>You can use both absolute and relative paths when linking between pages. Note that although both <code>.md</code> and <code>.html</code> extensions will work, the best practice is to omit file extensions so that VitePress can generate the final URLs based on your config.</p><div class="language-md"><button title="Copy Code" class="copy"></button><span class="lang">md</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">&lt;!-- Do --&gt;</span></span>\n<span class="line"><span style="color:#89DDFF;">[</span><span style="color:#C3E88D;">Getting Started</span><span style="color:#89DDFF;">](</span><span style="color:#F07178;text-decoration:underline;">./getting-started</span><span style="color:#89DDFF;">)</span></span>\n<span class="line"><span style="color:#89DDFF;">[</span><span style="color:#C3E88D;">Getting Started</span><span style="color:#89DDFF;">](</span><span style="color:#F07178;text-decoration:underline;">../guide/getting-started</span><span style="color:#89DDFF;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#676E95;font-style:italic;">&lt;!-- Don&#39;t --&gt;</span></span>\n<span class="line"><span style="color:#89DDFF;">[</span><span style="color:#C3E88D;">Getting Started</span><span style="color:#89DDFF;">](</span><span style="color:#F07178;text-decoration:underline;">./getting-started.md</span><span style="color:#89DDFF;">)</span></span>\n<span class="line"><span style="color:#89DDFF;">[</span><span style="color:#C3E88D;">Getting Started</span><span style="color:#89DDFF;">](</span><span style="color:#F07178;text-decoration:underline;">./getting-started.html</span><span style="color:#89DDFF;">)</span></span></code></pre></div><ul><li><p>Learn more about routing in vitepress <a href="https://vitepress.dev/guide/routing" target="_blank" rel="noreferrer">here</a></p></li><li><p>Website pages are written in Markdown format which are then converted to HTML.</p></li><li><p>Learn about Makdown language <a href="https://www.markdownguide.org/" target="_blank" rel="noreferrer">here.</a></p></li></ul>', 26);
const _hoisted_27 = [
  _hoisted_1
];
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createElementBlock("div", null, _hoisted_27);
}
const Routing = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export {
  __pageData,
  Routing as default
};
