import { _ as _export_sfc, o as openBlock, c as createElementBlock, V as createStaticVNode } from "./chunks/framework.ce59e187.js";
const _imports_0 = "/open-source-autonomous-vehicle-controller/assets/CC1.e176c88f.jpg";
const _imports_1 = "/open-source-autonomous-vehicle-controller/assets/CC2.fcbd58f8.png";
const _imports_2 = "/open-source-autonomous-vehicle-controller/assets/CC3.ae2086ea.png";
const _imports_3 = "/open-source-autonomous-vehicle-controller/assets/CC.8072d0cf.png";
const _imports_4 = "/open-source-autonomous-vehicle-controller/assets/CC4.266abc9f.png";
const _imports_5 = "/open-source-autonomous-vehicle-controller/assets/CC5.b5907a13.png";
const _imports_6 = "/open-source-autonomous-vehicle-controller/assets/CC6.d4877d92.png";
const _imports_7 = "/open-source-autonomous-vehicle-controller/assets/CC7.3fe8a149.png";
const _imports_8 = "/open-source-autonomous-vehicle-controller/assets/CC8.894a5c29.png";
const _imports_9 = "/open-source-autonomous-vehicle-controller/assets/CC9.9caa2fae.png";
const _imports_10 = "/open-source-autonomous-vehicle-controller/assets/CC10.005d1a4d.png";
const _imports_11 = "/open-source-autonomous-vehicle-controller/assets/CC11.e5ed62e8.png";
const _imports_12 = "/open-source-autonomous-vehicle-controller/assets/CC12.e5a5b905.png";
const _imports_13 = "/open-source-autonomous-vehicle-controller/assets/CC13.a7f79c58.png";
const __pageData = JSON.parse('{"title":"Companion Computers","description":"","frontmatter":{},"headers":[],"relativePath":"guide/CompanionComputers.md"}');
const _sfc_main = { name: "guide/CompanionComputers.md" };
const _hoisted_1 = /* @__PURE__ */ createStaticVNode('<h1 id="companion-computers" tabindex="-1">Companion Computers <a class="header-anchor" href="#companion-computers" aria-label="Permalink to &quot;Companion Computers&quot;">​</a></h1><h2 id="hardware" tabindex="-1">Hardware <a class="header-anchor" href="#hardware" aria-label="Permalink to &quot;Hardware&quot;">​</a></h2><p>Required materials</p><ul><li>Raspberry Pi <ul><li>Rpi 4 Model B 8GB RAM</li><li>Power supply: Raspberry Pi 15W USB-C Power Supply</li></ul></li><li>PC with microSD card slot</li><li>MicroSD card <ul><li>SanDisk 64GB Ultra MicroSDXC</li></ul></li></ul><p><img src="' + _imports_0 + '" alt="Hardware Image"></p><h2 id="software" tabindex="-1">Software <a class="header-anchor" href="#software" aria-label="Permalink to &quot;Software&quot;">​</a></h2><ul><li><p>Install the Raspberry Pi Imager <a href="https://www.raspberrypi.com/software/" target="_blank" rel="noreferrer">here.</a></p></li><li><p>Install the VNC Viewer <a href="https://www.realvnc.com/en/connect/download/viewer/" target="_blank" rel="noreferrer">here.</a></p></li></ul><h2 id="imaging-in-headless-mode" tabindex="-1">Imaging in Headless Mode <a class="header-anchor" href="#imaging-in-headless-mode" aria-label="Permalink to &quot;Imaging in Headless Mode&quot;">​</a></h2><ul><li>Insert the microSD card into the PC</li><li>Open the Raspberry Pi Imager <ul><li>Select the Raspberry Pi OS (64-bit) as the Operating System</li><li>Select the microSD card as the Storage</li></ul></li></ul><p><img src="' + _imports_1 + '" alt="Rasberry Pi Imager"></p><ul><li>Click on the gear icon in the bottom right hand corner to access the Advanced options <ul><li>Select Set hostname: raspberrypi.local</li><li>Select Enable SSH and Use password authentication</li><li>Select Set username and password <ul><li>Type the username and password of your choice</li></ul></li><li>Select Configure wireless LAN <ul><li>Type your wifi network name as the SSID and your wifi network password as the Password</li><li>Find your country’s two-letter country code</li></ul></li><li>Click Save</li></ul></li></ul><p><img src="' + _imports_2 + '" alt="Advance Options"></p><ul><li>Now, Click Write</li></ul><h2 id="osavc" tabindex="-1">OSAVC <a class="header-anchor" href="#osavc" aria-label="Permalink to &quot;OSAVC&quot;">​</a></h2><ul><li>Connect the OSAVC and PICkit3 Debugger to your PC</li><li>Load TestHarness.X’s code onto the OSAVC <ul><li>Open the TestHarness.X folder</li><li>Click Make and Program Device <img src="' + _imports_3 + '" alt="Save"></li></ul></li></ul><h2 id="raspberry-pi-4" tabindex="-1">Raspberry Pi 4 <a class="header-anchor" href="#raspberry-pi-4" aria-label="Permalink to &quot;Raspberry Pi 4&quot;">​</a></h2><ul><li>Insert the microSD card into the Raspberry Pi 4</li><li>Connect the micro-USB port of the OSAVC to the USB port of the Raspberry Pi 4</li><li>Power the Raspberry Pi 4 using the USB-C port with the power supply</li><li>Open an SSH tunnel from your PC to the Raspberry Pi 4 by typing ssh [username]@[hostname].local in your PC terminal <ul><li>sudo raspi-config</li><li>Select 5 Interfacing Options</li><li>Select P3 VNC</li><li>Click Yes to enabling the VNC server</li><li>Save your changes</li></ul></li><li>Open VNC Viewer and connect to [hostname].local at the top</li></ul><p><img src="' + _imports_4 + '" alt="RealVNC Viewer"></p><ul><li>Install opencv and its dependencies <ul><li>sudo apt-get update</li><li>sudo apt install python3-opencv</li></ul></li><li>Install pymavlink <ul><li>sudo pip3 install pymavlink</li></ul></li><li>Install a serial terminal on the Raspberry Pi 4 <ul><li>sudo apt-get install minicom</li><li>minicom -b 115200 -o -D /dev/ttyUSB0</li><li>Press Ctrl-A Z to get the Mincom Command Summary dialog</li></ul></li></ul><p><img src="' + _imports_5 + '" alt="Mincom"></p><ul><li>Press o to Configure Minicom</li><li>Select Serial port setup</li></ul><p><img src="' + _imports_6 + '" alt="Serial Port  Setup"></p><ul><li>press F to set F - Hardware Flow Control : No</li></ul><p><img src="' + _imports_7 + '" alt="Hardware Flow Control"></p><ul><li>Save by pressing Enter and exit the Minicom Command Summary</li><li>Click on the OSAVC’s reset button</li><li>Press h to transmit a Mavlink heartbeat message from the OSAVC to the Raspberry Pi 4 and then press q to quit</li></ul><p><img src="' + _imports_8 + '" alt="Hardware Flow Control"></p><ul><li>Create a new terminal tab, delete the Minicom terminal tab</li><li>In the new terminal, enter</li></ul><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">clone</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">https://github.com/uccross/open-source-autonomous-vehicle-controller.git</span></span></code></pre></div><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">cd</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">open-source-autonomous-vehicle-controller</span></span></code></pre></div><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">cd</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">companion-computer</span></span></code></pre></div><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">sudo</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">python3</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">OSAVC_web_server_rpi.py</span></span></code></pre></div><ul><li>Open <a href="http://0.0.0.0:80/" target="_blank" rel="noreferrer">http://0.0.0.0:80/</a> in Chromium by right clicking the link and clicking Open URL.</li></ul><p><img src="' + _imports_9 + '" alt="Terminal"></p><ul><li>A webpage like this should appear</li></ul><p><img src="' + _imports_10 + '" alt="Web Page"></p><ul><li>Click the Connect Mav button <ul><li>The button should turn red</li><li>The terminal should output target_system 1, target component 0</li></ul></li></ul><p><img src="' + _imports_11 + '" alt="Target Component"></p><p><img src="' + _imports_12 + '" alt="Target Component"></p><ul><li>Finally, click the Connected button again, and the MAVstatus should become Connected</li></ul><p><img src="' + _imports_13 + '" alt="Connected"></p>', 40);
const _hoisted_41 = [
  _hoisted_1
];
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createElementBlock("div", null, _hoisted_41);
}
const CompanionComputers = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export {
  __pageData,
  CompanionComputers as default
};
